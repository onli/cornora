#!/usr/bin/env bash
#:Usage: snapforx [-v] [-l] [-r] [-t] [-iof] [--stop] [-h]
#:
#:  cmd:   run the command when mouse reach to the edge of screen:
#:
#:  -iof, --ignore-on-fullscreen     disable command when active window
#:                                   is fullscreen.
#:  -l                               left edge maximization (left half of screen)
#:  -r                               right edge maximization (right half of screen)
#:  -t                               top edge maximization (full screen)
#:  --stop                           force stop cornora if it's running
#:  -v                               verbose output
#:  -h                               show the help


eval $(xdotool getdisplaygeometry --shell)
G=2;MR=4 W=$((WIDTH-G)); H=$((HEIGHT-G)); DB=/tmp/snapforx.lck;

usage() {
    grep "^#:" $0 | while read DOC; do printf '%s\n' "${DOC###:}"; done
    exit
}

options() {
    while [[ "$1" ]]; do
        case "$1" in
            "-iof"|"--ignore-on-fullscreen") iof=1 ;;
            "--stop") kill -9 $(cat $DB) && exit ;;
            "-v") verbose=1 ;;
            ""|"-h"|"--help") usage ;;
        esac
    shift
    done
}

delay() {
    local IFS
    [[ -n "${_de:-}" ]] || exec {_de}<> <(:)
    read ${1:+-t "$1"} -u $_de || :
}

mousebuttonDown() {
    if [[ -n $(xinput --query-state $mouseId | grep 'button\[1\]=down') ]]; then
        return 0
    fi
    return 1
}

onClientDecoration() {
    eval $(xdotool getmouselocation --shell)
    mouseY=$Y
    eval $(xdotool getactivewindow getwindowgeometry --shell)
    if [[ "$mouseY - $Y" -lt 20 ]]; then
        return 0
    fi
    return 1
}

movingDownward() {
    eval $(xdotool getmouselocation --shell)
    mouseY1=$Y
    if [[ "$Y" -lt 20 ]]; then
        delay 0.5
        eval $(xdotool getmouselocation --shell)
        mouseY2=$Y
        if [[ "$mouseY2" -gt "$mouseY1" ]]; then
            return 0
        fi
    fi
    return 1
}

# Confirm that the mouse stayed long enough at the current monitor side
confirmedEdge() {
    targetSide="$1"
    eval $(xdotool getmouselocation --shell)
    [[ "$targetSide" == "left" ]] && [[ -n "$left" && "$X" -gt "$G" ]] && return 1
    [[ "$targetSide" == "right" ]] && [[ -n "$left" && "$X" -lt "$W" ]] && return 1
    [[ "$targetSide" == "top" ]] && [[ -n "$left" && "$T" -gt "1" ]] && return 1
    delay 0.5
    eval $(xdotool getmouselocation --shell)
    [[ "$targetSide" == "left" ]] && [[ -n "$left" && "$X" -gt "$G" ]] && return 1
    [[ "$targetSide" == "right" ]] && [[ -n "$left" && "$X" -lt "$W" ]] && return 1
    [[ "$targetSide" == "top" ]] && [[ -n "$left" && "$Y" -gt "1" ]] && return 1
    return 0
}

# Call the window control command for the current active window that is linked to the currently touched side
invokeSnapCommand() {
    targetSide="$1"
    proc=$(IFS=" "; set -- $1; echo $1)
    id="$(pidof -x "$proc")"
    [[ "$targetSide" == "left" ]] && [[ -z "$id" ]] && WIDTH=`xdpyinfo | grep 'dimensions:' | awk -F'[^0-9]+' '{ print $2 }'` && HALF=$(($WIDTH/2)) && wmctrl -r :ACTIVE: -b add,maximized_vert && wmctrl -r :ACTIVE: -e 0,0,0,$HALF,-1
    [[ "$targetSide" == "right" ]] && [[ -z "$id" ]] && WIDTH=`xdpyinfo | grep 'dimensions:' | awk -F'[^0-9]+' '{ print $2 }'` && HALF=$(($WIDTH/2)) && wmctrl -r :ACTIVE: -b add,maximized_vert && wmctrl -r :ACTIVE: -e 0,$HALF,0,$HALF,-1
    [[ "$targetSide" == "top" ]] && [[ -z "$id" ]] && wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
    if [[ "$targetSide" == "unmaximize" ]]; then
        eval $(xdotool getmouselocation --shell)
        [[ -z "$id" ]] && wmctrl -r :ACTIVE: -b remove,maximized_vert,maximized_horz
        xdotool getactivewindow windowmove $X $Y
    fi
    
}

quithandler() {
    rm -f $DB
    exit $?
}

trap quithandler SIGINT SIGTERM EXIT

[[ -f "$DB" && -z "$(cat $DB | xargs ps -p)" ]] && rm -rf $DB
[[ -z "$@" ]] && usage || options "$@"

if [[ ! -f "$DB" ]]; then
    moveMode=false
    moveModeDuration=0
    eval $(xinput --list | grep '  Mouse' | cut -f 2)
    mouseId="$id"

    while :;do
        [[ ! -f "$DB" ]] && printf "%s\n" $$ >$DB
        eval $(xdotool getmouselocation --shell)
        if [[ -n "$iof" && -n "$(xdotool getactivewindow 2>/dev/null | xargs xprop -id 2>/dev/null | grep E_FULLS)" ]]; then
            delay 0.8
        else
            let moveModeDuration++
            if [[ $moveModeDuration -gt 5 ]];then
                moveModeDuration=0;
                moveMode=false
            fi
            if $moveMode; then
                [[ "$X" -lt "$G" ]] && confirmedEdge "left" && invokeSnapCommand "left"
                [[ "$X" -gt "$W" ]] && confirmedEdge "right" && invokeSnapCommand "right"
                [[ "$Y" -lt "1" ]] && confirmedEdge "top" && invokeSnapCommand "top"
                movingDownward && mousebuttonDown && invokeSnapCommand "unmaximize"
            else
                # detect that we are moving a window
                if mousebuttonDown && onClientDecoration; then
                    moveMode=true
                fi
            fi
        fi
        delay 0.1
        
    done
    exit 0
else    
    printf "Lock Exists: SnapForX is running at PID $(cat $DB). run \"snapforx --stop\" to close it.\n"
    exit 1
fi
